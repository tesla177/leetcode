package suanfa;

import java.util.HashSet;
import java.util.Set;

public class code805H {
    public static void main(String[] args) {
        /* 核心思想：
            A数组平均值等于B数组平均值，即也等于整个数组的平均值。
            将每个元素减去平均值，新元素平均值为0，即找b部分数组元素之和为0，剩下的也自然为0。

       */
        int[] nums = {1,2,3,4,5,6,7,8};
        //数组长度，为1直接返回false
        int n = nums.length;
        if(n == 1){
            System.out.println(false);
        }
        //将数组一分为二，减少时间复杂度
        int m = n / 2;
        //对数组进行求和
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        // 如果直接将 nums 中的每个元素减去数组和的平均值（sum/n），可能会引入浮点数，判断时出现误差
        //将nums中的每个数乘以n再减去sum，一定为整数
        for (int i = 0; i < n; i++) {
            nums[i] = nums[i] * n - sum;
        }
        //创建集合，记录每一种取值的和的情况
        Set<Integer> left = new HashSet<>();
        //m=4，从左半数组中的4个元素枚举所有的情况取值求和，一共有2^m -1种，
        //借助位运算实现，i的取值范围为[1,15]，至少要取一个
        for(int i = 1;i < (1<<m);i++){
            int tot = 0;
            for (int j = 0;j < m;j++){
                if((i & (1<<j))!= 0){
                    tot += nums[j];
                }
            }
            //如果前半个数组有部分元素之和为0，则剩余的所有元素之和肯定也为0，直接返回true。
            if(tot == 0){
                System.out.println(true);
            }
            //否则记录在集合中
            left.add(tot);
        }
        int rsum = 0;
        for (int i = 1;i < (1<<(n-m));i++){
            int tot = 0;
            for (int j = m;j < n;j++){
                if ((i & (1<<(j-m)))!= 0){
                    tot += nums[j];
                }
            }
            if (tot == 0 ||(rsum!=tot && left.contains(-tot))){
                System.out.println(true);
            }
        }
        System.out.println(false);
    }
}
